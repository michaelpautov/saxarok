import type { Context } from 'grammy';
import { geminiService } from '../services/gemini.js';
import { speechService } from '../services/speech.js';
import { loadPrompts, getActivePromptId } from '../services/storage.js';
import { env } from '../config/env.js';

// Track messages currently being processed to avoid duplicates from Telegram retries
const processingMessages = new Set<number>();

/**
 * Splits long messages into chunks for Telegram
 */
function splitMessage(text: string, maxLength = 4000): string[] {
  if (text.length <= maxLength) {
    return [text];
  }

  const chunks: string[] = [];
  let currentChunk = '';
  const lines = text.split('\n');

  for (const line of lines) {
    if (currentChunk.length + line.length + 1 > maxLength) {
      if (currentChunk) {
        chunks.push(currentChunk);
        currentChunk = '';
      }
      // If single line is too long, split it
      if (line.length > maxLength) {
        for (let i = 0; i < line.length; i += maxLength) {
          chunks.push(line.slice(i, i + maxLength));
        }
      } else {
        currentChunk = line;
      }
    } else {
      currentChunk += (currentChunk ? '\n' : '') + line;
    }
  }

  if (currentChunk) {
    chunks.push(currentChunk);
  }

  return chunks;
}

/**
 * Delays execution for specified milliseconds
 */
function delay(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/**
 * Handles incoming text messages from users
 */
export async function handleMessage(ctx: Context): Promise<void> {
  if (!ctx.message?.text || !ctx.from) {
    return;
  }

  const messageId = ctx.message.message_id;

  // Check if this message is already being processed (duplicate webhook)
  if (processingMessages.has(messageId)) {
    console.log(`[DUPLICATE] Message ${messageId} already being processed, ignoring`);
    return;
  }

  // Mark message as being processed
  processingMessages.add(messageId);

  const userId = ctx.from.id.toString();
  const username = ctx.from.username || ctx.from.first_name || 'User';
  const userMessage = ctx.message.text;

  try {
    // Get active prompt
    const activePromptId = await getActivePromptId();
    if (!activePromptId) {
      await ctx.reply('‚ö†Ô∏è No active prompt configured. Please contact administrator.', {
        parse_mode: 'HTML',
      });
      return;
    }

    const prompts = await loadPrompts();
    const activePrompt = prompts.find((p) => p.id === activePromptId);

    if (!activePrompt) {
      await ctx.reply('‚ö†Ô∏è Active prompt not found. Please contact administrator.', {
        parse_mode: 'HTML',
      });
      return;
    }

    // Show typing indicator
    await ctx.replyWithChatAction('typing');

    // Get AI response
    let response = await geminiService.sendMessage(
      userId,
      username,
      userMessage,
      activePrompt.content
    );

    // DEBUG: Log full response from Gemini
    console.log('=== GEMINI RESPONSE ===');
    console.log('Length:', response.length);
    console.log('Content:', response);
    console.log('======================');

    // TEMPORARILY DISABLED: Detect if AI generated multiple messages
    // const messageSeparators = response.split(/\n\n(?=üëã|ü§î|üí°|‚ö†Ô∏è|‚úÖ|‚ùå|‚ùì)/);
    // if (messageSeparators.length > 1) {
    //   response = messageSeparators[0]!.trim();
    //   console.log(
    //     `[WARNING] AI generated ${messageSeparators.length} messages. Sending only first one.`
    //   );
    // }

    // Split long messages and send with HTML formatting
    const messageParts = splitMessage(response);

    for (let i = 0; i < messageParts.length; i++) {
      const part = messageParts[i];
      if (part) {
        await ctx.reply(part, { parse_mode: 'HTML' });

        // Small delay between parts to avoid rate limiting
        if (i < messageParts.length - 1) {
          await delay(1000);
        }
      }
    }
  } catch (error) {
    console.error('Error handling message:', error);
    await ctx.reply('‚ùå Sorry, an error occurred processing your message. Please try again.', {
      parse_mode: 'HTML',
    });
  } finally {
    // Remove from processing set when done
    processingMessages.delete(messageId);
  }
}

/**
 * Handles /start command
 */
export async function handleStart(ctx: Context): Promise<void> {
  await ctx.reply(
    `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Ç—å—é—Ç–æ—Ä –ø–æ —Å–µ—Ä–≤–∏—Å—É –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ —à—É–≥–∞—Ä–∏–Ω–≥–∞.\n\n` +
      `üéØ –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:\n` +
      `üî∏ –ù–∞—É—á—É –æ–±—â–∞—Ç—å—Å—è —Å –ì–æ—Å—Ç—å—è–º–∏\n` +
      `üî∏ –ü–æ–∫–∞–∂—É, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É\n` +
      `üî∏ –ü–æ–º–æ–≥—É –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã\n` +
      `üî∏ –†–∞—Å—Å–∫–∞–∂—É –æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π\n\n` +
      `üí¨ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞—á–Ω–µ–º –æ–±—É—á–µ–Ω–∏–µ!\n\n` +
      `‚ú® –¢—Ä–µ–Ω–µ—Ä –ø–æ –°–µ—Ä–≤–∏—Å—É ‚Äî —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è: —Å–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å –º–∞—Å—Ç–µ—Ä–∞ –¢–û–ü-—É—Ä–æ–≤–Ω—è, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –ì–æ—Å—Ç—å—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞–ª–∞ –í–ê–£-—ç—Ñ—Ñ–µ–∫—Ç –∏ —Ö–æ—Ç–µ–ª–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –∫ —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É.\n\n` +
      `üìå –†–µ–∂–∏–º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¢—Ä–µ–Ω–µ—Ä–∞:\n\n` +
      `ü™ú –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—É ‚Äî –¢—Ä–µ–Ω–µ—Ä –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –í–∞—Å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º: –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É (–Ω–∞–ø–∏—à–∏—Ç–µ - –û–±—É—á–∏ –º–µ–Ω—è —Å–µ—Ä–≤–∏—Å—É –ø–æ—à–∞–≥–∞–ª–æ).\n\n` +
      `üí¨ –í–æ–ø—Ä–æ—Å—ã –ø–æ —Å–∏—Ç—É–∞—Ü–∏—è–º ‚Äî –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ —Å –ì–æ—Å—Ç—å—è–º–∏ –∏–ª–∏ –ø–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ —à—É–≥–∞—Ä–∏–Ω–≥–∞ (–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏).\n\n` +
      `‚ö° –í–∞–∂–Ω–æ:\n\n` +
      `–¢—Ä–µ–Ω–µ—Ä –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ‚úçÔ∏è\n` +
      `–ü–∏—à–∏—Ç–µ –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n` +
      `–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ‚è≥ ‚Äî –¢—Ä–µ–Ω–µ—Ä —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç.\n\n` +
      `üë§ –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ –§–∏–ª–∏–∞–ª.`,
    { parse_mode: 'HTML' }
  );
}

/**
 * Handles incoming voice messages from users
 */
export async function handleVoiceMessage(ctx: Context): Promise<void> {
  if (!ctx.message?.voice || !ctx.from) {
    return;
  }

  const messageId = ctx.message.message_id;

  // Check if this message is already being processed (duplicate webhook)
  if (processingMessages.has(messageId)) {
    console.log(`[DUPLICATE] Voice message ${messageId} already being processed, ignoring`);
    return;
  }

  // Mark message as being processed
  processingMessages.add(messageId);

  const userId = ctx.from.id.toString();
  const username = ctx.from.username || ctx.from.first_name || 'User';

  try {
    console.log('[VOICE] Received voice message from user:', username);
    console.log('[VOICE] Duration:', ctx.message.voice.duration, 'seconds');

    // Show typing indicator
    await ctx.replyWithChatAction('typing');

    // Step 1: Download audio file from Telegram
    console.log('[VOICE] Downloading audio from Telegram...');
    const file = await ctx.getFile();
    const fileUrl = `https://api.telegram.org/file/bot${env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    const response = await fetch(fileUrl);
    if (!response.ok) {
      throw new Error(`Failed to download audio: ${response.statusText}`);
    }

    const audioBuffer = Buffer.from(await response.arrayBuffer());
    console.log('[VOICE] Audio downloaded, size:', audioBuffer.length, 'bytes');

    // Step 2: Transcribe audio using Google Speech-to-Text
    console.log('[VOICE] Transcribing audio...');
    await ctx.replyWithChatAction('typing'); // Keep typing indicator active

    const transcribedText = await speechService.transcribeAudio(
      audioBuffer,
      ctx.message.voice.mime_type || 'audio/ogg'
    );

    console.log('[VOICE] Transcription successful:', transcribedText);

    // Step 3: Get active prompt
    const activePromptId = await getActivePromptId();
    if (!activePromptId) {
      await ctx.reply('‚ö†Ô∏è No active prompt configured. Please contact administrator.', {
        parse_mode: 'HTML',
      });
      return;
    }

    const prompts = await loadPrompts();
    const activePrompt = prompts.find((p) => p.id === activePromptId);

    if (!activePrompt) {
      await ctx.reply('‚ö†Ô∏è Active prompt not found. Please contact administrator.', {
        parse_mode: 'HTML',
      });
      return;
    }

    // Step 4: Process transcribed text with Gemini AI
    console.log('[VOICE] Processing with Gemini AI...');
    await ctx.replyWithChatAction('typing');

    const aiResponse = await geminiService.sendMessage(
      userId,
      username,
      transcribedText,
      activePrompt.content
    );

    console.log('[VOICE] AI response received, length:', aiResponse.length);

    // Step 5: Send response to user
    const messageParts = splitMessage(aiResponse);

    for (let i = 0; i < messageParts.length; i++) {
      const part = messageParts[i];
      if (part) {
        await ctx.reply(part, { parse_mode: 'HTML' });

        // Small delay between parts to avoid rate limiting
        if (i < messageParts.length - 1) {
          await delay(1000);
        }
      }
    }

    console.log('[VOICE] Voice message processing completed successfully');
  } catch (error) {
    console.error('[VOICE] Error handling voice message:', error);
    await ctx.reply(
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
      {
        parse_mode: 'HTML',
      }
    );
  } finally {
    // Remove from processing set when done
    processingMessages.delete(messageId);
  }
}

/**
 * Handles /clear command to reset conversation history
 */
export async function handleClear(ctx: Context): Promise<void> {
  if (!ctx.from) return;

  const userId = ctx.from.id.toString();

  try {
    await geminiService.clearHistory(userId);
    await ctx.reply("‚úÖ Your conversation history has been cleared. Let's start fresh!", {
      parse_mode: 'HTML',
    });
  } catch (error) {
    console.error('Error clearing history:', error);
    await ctx.reply('‚ùå Failed to clear history. Please try again.', {
      parse_mode: 'HTML',
    });
  }
}

/**
 * Handles /help command
 */
export async function handleHelp(ctx: Context): Promise<void> {
  await ctx.reply(
    `üÜò Available Commands:\n\n` +
      `/start - Welcome message and introduction\n` +
      `/clear - Clear your conversation history\n` +
      `/help - Show this help message\n\n` +
      `Just send me any question to get started!`,
    { parse_mode: 'HTML' }
  );
}
